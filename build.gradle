plugins {
	id 'org.springframework.boot' version '2.1.4.RELEASE'
	id 'java'
    id "com.bmuschko.docker-remote-api" version "4.8.1"	
}

apply plugin: 'io.spring.dependency-management'
apply from: "$rootDir/gradle/versioning.gradle"

group = 'ch.so.agi'

ext {
    apacheCamelVersion = "2.23.2"
}
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    jcenter()
    mavenCentral()
    maven { url "http://jars.interlis.ch" }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-actuator'    
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity4:3.0.4.RELEASE'
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:2.4.1'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation "org.apache.camel:camel-spring-boot-starter:${apacheCamelVersion}"
    implementation "org.apache.camel:camel-zipfile:${apacheCamelVersion}"    
    implementation "ch.interlis:ilivalidator:1.11.0"    
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2:1.4.199'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

task deleteFilesJarDir(type: Delete) {
    delete fileTree("${buildDir}/dependency/")//.listFiles()
    delete file("${buildDir}/dependency/")
}

task unzipJar(type: Copy) {
    from zipTree(file("${buildDir}/libs/avgbs-checkservice-"+version+".jar"))
    into file("${buildDir}/dependency/")
}
unzipJar.dependsOn(deleteFilesJarDir)
bootJar.finalizedBy(unzipJar)

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

docker {
    registryCredentials {
        username = System.env.dockerRegistryUser
        password = System.env.dockerRegistryPass
    }
}

task buildDockerImage(type: DockerBuildImage) {
    description = "Build docker image."
    inputDir = project.projectDir
    tags = ["sogis/avgbs-checkservice:"+ version, "sogis/avgbs-checkservice:latest"]
    labels = ["avgbs-checkservice.created": new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()), 
            "avgbs-checkservice.git_commit":  getCheckedOutGitCommitHash(), 
            "avgbs-checkservice.travis_build": version.toString()]    
}

task pushDockerImage_One(type: DockerPushImage) {
    description = "Push docker image to hub.docker.com (images are UNTESTED)."
    imageName = buildDockerImage.tags.get().toArray()[0]
}

task pushDockerImage_Two(type: DockerPushImage) {
    description = "Push docker image to hub.docker.com (images are UNTESTED)."
    imageName = buildDockerImage.tags.get().toArray()[1]
}

task pushDockerImages() {
    description = "Collect all push images tasks."
}

pushDockerImages.dependsOn {
    tasks.findAll { task -> task.name.startsWith('pushDockerImage_') }
}

import java.text.SimpleDateFormat

def getCheckedOutGitCommitHash() {
    'git log -1 --pretty=%H'.execute().text.trim()
}

def getTimestamp() {
    def date = new Date()
    return date.format('yyyy-MM-dd HH:mm:ss')
}

task versionTxt()  {
    outputs.upToDateWhen { false }
    doLast {
        new File("version.txt").text = """
Version: $version
Revision: ${getCheckedOutGitCommitHash()}
Buildtime: ${getTimestamp()}
Application-name: avgbs-checkservice
"""
    }
}
task copyVersionTxt(type: Copy) {
    from "version.txt"
    into "src/main/resources/static/"
}
copyVersionTxt.dependsOn(versionTxt)
build.dependsOn(copyVersionTxt)
classes.dependsOn(copyVersionTxt)
